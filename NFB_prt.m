function extractOnsetsAndDurations()
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % extractOnsetsAndDurations
    % Developed by Amir Hossein Dakhili
    % amirhossein.dakhili@myacu.edu.au
    % Australian Catholic University
    % Created: April 2024
    % Last Modified: June 2025
    %
    % This function facilitates the conversion of experimental timing data,
    % typically stored in a MATLAB `.mat` log file generated by Psychtoolbox,
    % into a BrainVoyager PRT (Protocol) file. The PRT file specifies the
    % onset and offset (or duration) of different experimental conditions
    % in milliseconds, which is essential for fMRI data analysis in BrainVoyager.
    %
    % Key Features:
    % - **User-Friendly Interface**: Prompts the user to select the input
    %   `.mat` log file using a graphical file selection dialog.
    % - **Data Extraction**: Loads timing data for 'Downregulation' and
    %   'Neutral' blocks from the selected `.mat` file. Assumes these
    %   timings are stored in variables named `Down_block_timings` and
    %   `Neutral_block_timings` respectively, with the first two columns
    %   representing onset and offset times in seconds.
    % - **Time Unit Conversion**: Converts all timing information from seconds
    %   to milliseconds, as required by the BrainVoyager PRT format.
    % - **Sorting**: Ensures that the timing entries for each condition are
    %   sorted in ascending order, which is a common requirement for fMRI
    %   protocol files.
    % - **PRT File Generation**: Creates a new `.prt` file with a standard
    %   BrainVoyager protocol header, including file version, time resolution,
    %   experiment name, and default display colors for the time course plots.
    % - **Condition Specification**: Writes out the 'Neutral' and
    %   'Downregulation' conditions, including the number of trials for each
    %   and their respective onset and offset times.
    % - **Color Coding**: Assigns distinct colors for 'Neutral' (yellowish) and
    %   'Downregulation' (blueish) conditions within the PRT file for clear
    %   visualization in BrainVoyager.
    %
    % Important Considerations:
    % - **Input File Structure**: This script is designed to work with `.mat`
    %   files that contain `Down_block_timings` and `Neutral_block_timings`
    %   variables. If your log file uses different variable names or a
    %   different structure, you will need to modify the data extraction lines.
    % - **Hardcoded Conditions**: Currently, the script specifically processes
    %   'Neutral' and 'Downregulation' conditions. 'Rest' and 'Upregulation'
    %   conditions are commented out but can be easily re-enabled or added
    %   by uncommenting/modifying the relevant sections.
    % - **Output File Name**: The output PRT file is hardcoded to `NFB_timing.prt`.
    %   If you need a different naming convention (e.g., participant-specific),
    %   you'll need to modify the `output_filename` variable.
    % - **Error Handling**: Basic error handling for file selection (user cancel)
    %   is included. More robust error handling for missing variables within the
    %   `.mat` file could be added if necessary.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Select input log.mat file
    [filename, pathname] = uigetfile('*.mat', 'Select the input log.mat file');
    
    % Check if a file was selected
    if isequal(filename,0) || isequal(pathname,0)
       disp('User pressed cancel')
    else
       disp(['User selected ', fullfile(pathname, filename)])
       fullpath = fullfile(pathname, filename);
       
       % Load data from the selected file
       load(fullpath); 

       % Extract timings for each condition (in milliseconds)
%        upregulation_timings = Up_block_timings(:, [1 2]) * 1000; 
         downregulation_timings = Down_block_timings(:, [1 2]) * 1000;
         neutral_timings = Neutral_block_timings(:, [1 2]) * 1000;

       % Sort timings in ascending order
%        upregulation_timings = sortrows(upregulation_timings);
         downregulation_timings = sortrows(downregulation_timings);
         neutral_timings = sortrows(neutral_timings);

       % Create output PRT file
       output_filename = 'NFB_timing.prt'; 
       fileID = fopen(output_filename, 'w');
       fprintf(fileID, '\n'); 
       fprintf(fileID, 'FileVersion:        6\n'); 
       fprintf(fileID, '\n'); 
       fprintf(fileID, 'ResolutionOfTime:   msec\n');
       fprintf(fileID, '\n'); 
       fprintf(fileID, 'Experiment:         NFB\n');
       fprintf(fileID, '\n'); 
       fprintf(fileID, 'BackgroundColor:    0 0 0\n');
       fprintf(fileID, 'TextColor:          255 255 255\n');
       fprintf(fileID, 'TimeCourseColor:    255 255 30\n');
       fprintf(fileID, 'TimeCourseThick:    2\n');
       fprintf(fileID, 'ReferenceFuncColor: 30 200 30\n');
       fprintf(fileID, 'ReferenceFuncThick: 2\n');
       fprintf(fileID, '\n'); 
       fprintf(fileID, 'NrOfConditions:  3\n'); 

%        % Write Rest condition information
%        fprintf(fileID, 'Rest\n');
%        fprintf(fileID, '%d\n', size(rest_timings, 1)); 
%        for i = 1:size(rest_timings, 1)
%            fprintf(fileID, '%d %d\n', round(rest_timings(i, 1)), round(rest_timings(i, 2))); 
%        end
%        fprintf(fileID, 'Color: 85 0 0\n\n');

       % Write Neutral condition information
       fprintf(fileID, 'Neutral\n'); 
       fprintf(fileID, '%d\n', size(neutral_timings, 1));
       for i = 1:size(neutral_timings, 1)
           fprintf(fileID, '%d %d\n', round(neutral_timings(i, 1)), round(neutral_timings(i, 2))); 
       end
       fprintf(fileID, 'Color: 85 85 0\n\n'); 

%        % Write Upregulation condition information
%        fprintf(fileID, 'Upregulation\n'); 
%        fprintf(fileID, '%d\n', size(upregulation_timings, 1));
%        for i = 1:size(upregulation_timings, 1)
%            fprintf(fileID, '%d %d\n', round(upregulation_timings(i, 1)), round(upregulation_timings(i, 2))); 
%        end
%        fprintf(fileID, 'Color: 0 85 0\n\n'); 

       % Write Downregulation condition information
       fprintf(fileID, 'Downregulation\n'); 
       fprintf(fileID, '%d\n', size(downregulation_timings, 1)); 
       for i = 1:size(downregulation_timings, 1)
           fprintf(fileID, '%d %d\n', round(downregulation_timings(i, 1)), round(downregulation_timings(i, 2))); 
       end
       fprintf(fileID, 'Color: 0 0 85\n\n'); 

       

       fprintf(fileID, 'ResponseConditions: \t 0\n');

       % Close the file
       fclose(fileID);
       disp(['Timing information saved to: ' output_filename]);
    end
end
